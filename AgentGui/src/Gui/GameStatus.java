/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Gui;

import AgentCommon.Agent;
import Common.AgentInfo;
import Common.GameConfiguration;
import Messages.GetResource;
import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

/**
 *
 * @author gregor
 */
public class GameStatus extends javax.swing.JPanel implements Observer{

    /**
     * Creates new form asdf
     */
    private Agent agent;
    private static GameStatus instance;
    
     DefaultMutableTreeNode treeRootNode,gcNode ;
     JTree dataTree;
    public GameStatus(Agent agent) {
        initComponents();
        this.agent = agent;
        this.agent.addObserver(this);
        this.instance = this;
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ticksLabel = new javax.swing.JTextField();
        healthLabel = new javax.swing.JTextField();
        twineLabel = new javax.swing.JTextField();
        AgentStatus = new javax.swing.JTextField();
        ExcuseLabel = new javax.swing.JTextField();
        positionLabel = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTA = new javax.swing.JTextArea();
        getConfigurationButton = new javax.swing.JButton();
        getConfigurationButton1 = new javax.swing.JButton();
        getConfigurationButton2 = new javax.swing.JButton();
        getConfigurationButton3 = new javax.swing.JButton();
        getConfigurationButton4 = new javax.swing.JButton();
        getConfigurationButton5 = new javax.swing.JButton();
        getConfigurationButton6 = new javax.swing.JButton();
        treeScrollPane = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setFocusable(false);

        ticksLabel.setText("TimeTicks:");
        ticksLabel.setAutoscrolls(false);
        ticksLabel.setFocusable(false);

        healthLabel.setText("Health:");
        healthLabel.setAutoscrolls(false);
        healthLabel.setFocusable(false);

        twineLabel.setText("Whining Twine Count:");
        twineLabel.setAutoscrolls(false);
        twineLabel.setFocusable(false);
        twineLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twineLabelActionPerformed(evt);
            }
        });

        AgentStatus.setText("Excuse Count:");
        AgentStatus.setAutoscrolls(false);
        AgentStatus.setFocusable(false);
        AgentStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgentStatusActionPerformed(evt);
            }
        });

        ExcuseLabel.setText("Bomb Count:");
        ExcuseLabel.setAutoscrolls(false);
        ExcuseLabel.setFocusable(false);
        ExcuseLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcuseLabelActionPerformed(evt);
            }
        });

        positionLabel.setText("Kill Count:");
        positionLabel.setAutoscrolls(false);
        positionLabel.setFocusable(false);
        positionLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionLabelActionPerformed(evt);
            }
        });

        logTA.setColumns(20);
        logTA.setLineWrap(true);
        logTA.setRows(5);
        logTA.setToolTipText("");
        jScrollPane1.setViewportView(logTA);

        getConfigurationButton.setText("Get Game Configuration");
        getConfigurationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConfigurationButtonActionPerformed(evt);
            }
        });

        getConfigurationButton1.setText("Get ZombieList");
        getConfigurationButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConfigurationButton1ActionPerformed(evt);
            }
        });

        getConfigurationButton2.setText("Get TwineGeneratorList");
        getConfigurationButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConfigurationButton2ActionPerformed(evt);
            }
        });

        getConfigurationButton3.setText("Get Twine");
        getConfigurationButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConfigurationButton3ActionPerformed(evt);
            }
        });

        getConfigurationButton4.setText("Get ExcuseGeneratorList");
        getConfigurationButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConfigurationButton4ActionPerformed(evt);
            }
        });

        getConfigurationButton5.setText("Get Excuse");
        getConfigurationButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConfigurationButton5ActionPerformed(evt);
            }
        });

        getConfigurationButton6.setText("Increase Health");
        getConfigurationButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConfigurationButton6ActionPerformed(evt);
            }
        });

        jTree1.setModel(getModel());
        treeScrollPane.setViewportView(jTree1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(getConfigurationButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(getConfigurationButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(positionLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ExcuseLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(AgentStatus, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(twineLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ticksLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(healthLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(getConfigurationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getConfigurationButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                .addComponent(getConfigurationButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getConfigurationButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getConfigurationButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(treeScrollPane)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(healthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ticksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(twineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AgentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(ExcuseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(positionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfigurationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfigurationButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfigurationButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfigurationButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfigurationButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfigurationButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfigurationButton6))
                    .addComponent(treeScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void twineLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twineLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_twineLabelActionPerformed

    private void AgentStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgentStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AgentStatusActionPerformed

    private void ExcuseLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcuseLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExcuseLabelActionPerformed

    private void positionLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positionLabelActionPerformed

    private void getConfigurationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getConfigurationButtonActionPerformed
        agent.requestResourceFromServer(GetResource.PossibleResourceType.GameConfiguration);
    }//GEN-LAST:event_getConfigurationButtonActionPerformed

    private void getConfigurationButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getConfigurationButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getConfigurationButton1ActionPerformed

    private void getConfigurationButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getConfigurationButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getConfigurationButton2ActionPerformed

    private void getConfigurationButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getConfigurationButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getConfigurationButton3ActionPerformed

    private void getConfigurationButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getConfigurationButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getConfigurationButton4ActionPerformed

    private void getConfigurationButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getConfigurationButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getConfigurationButton5ActionPerformed

    private void getConfigurationButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getConfigurationButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getConfigurationButton6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AgentStatus;
    private javax.swing.JTextField ExcuseLabel;
    private javax.swing.JButton getConfigurationButton;
    private javax.swing.JButton getConfigurationButton1;
    private javax.swing.JButton getConfigurationButton2;
    private javax.swing.JButton getConfigurationButton3;
    private javax.swing.JButton getConfigurationButton4;
    private javax.swing.JButton getConfigurationButton5;
    private javax.swing.JButton getConfigurationButton6;
    private javax.swing.JTextField healthLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextArea logTA;
    private javax.swing.JTextField positionLabel;
    private javax.swing.JTextField ticksLabel;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JTextField twineLabel;
    // End of variables declaration//GEN-END:variables

    public void updateAgentInfo(){
        AgentInfo a = agent.getAgentInfo();
        healthLabel.setText("Health: " + Double.toString(a.getStrength()));
        ticksLabel.setText("Ticks: " + Integer.toString(agent.getTickQueue().size()));
        twineLabel.setText("Twine: " + Integer.toString(agent.getTwineQueue().size()));
        AgentStatus.setText("Status: " + a.getAgentStatus().toString());
        ExcuseLabel.setText("Excuses: " + Integer.toString(agent.getExcuseQueue().size()));
        positionLabel.setText("Agent Position: " + "x: " +a.getLocation().getX() + " y: " + a.getLocation().getY());
//        scoreLabel.setText("Score: " + Double.toString(a.getPoints()));
//        twineCount5.setText("Speed: " + Double.toString(a.getSpeed()));
//        
        
    }
    
  
    public static void updateLog(String toAppend){
        if(instance == null){
            return ;
        }
        else{
            instance.logTA.append(toAppend + "\n");
            instance.logTA.setCaretPosition(instance.logTA.getDocument().getLength());
        }
    }
    @Override
    public void update(Observable o, Object arg) {
        updateLog("Updating Gui");
        updateAgentInfo();
        updateTree();
        
        
        repaint();
        validate();
    }
    
    
    
    public void updateTree(){
        updateGameInfo();
        repaint();
        validate();
    }
    
    

    private TreeModel getModel() {
         treeRootNode =new DefaultMutableTreeNode("Game Info");
         gcNode = new DefaultMutableTreeNode("Game Configuration");
         gcNode.add(new DefaultMutableTreeNode("No Information Available"));
         treeRootNode.add(gcNode);
        TreeModel tm = new DefaultTreeModel(treeRootNode);
        return tm;
    }

    private ArrayList<String> getFields(GameConfiguration obj){
        ArrayList<String> toReturn = new ArrayList<>();
        try {
            BeanInfo beanInfo = Introspector.getBeanInfo(GameConfiguration.class);
            for (PropertyDescriptor propertyDesc : beanInfo.getPropertyDescriptors()) {
                String propertyName = propertyDesc.getName();
                Object value = propertyDesc.getReadMethod().invoke(obj);
                
                 if(value instanceof Float){
                    propertyName +=" " + (float) value;
                }
                else if(value instanceof Byte){
                    propertyName +=" " + (byte) value;
                }
                else if(value instanceof Short){
                    propertyName +=" " + (short) value;
                }
                 toReturn.add(propertyName);
            }
        } catch (IntrospectionException ex) {
            Logger.getLogger(Agent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Agent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(Agent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(Agent.class.getName()).log(Level.SEVERE, null, ex);
        }
        return toReturn;
    }
    
    private void addList(DefaultMutableTreeNode tn, ArrayList<String> list){
        for(String t : list){
            tn.add(new DefaultMutableTreeNode(t));
        }
    }
    private void updateGameInfo() {
        GameConfiguration gc = agent.getGameConfiguration();
        if(gc == null){
            System.out.println("Configuration wa snull");
            return;
        }
        else{
            gcNode.removeAllChildren();
            addList(gcNode, getFields(gc));
        }
    }
}
